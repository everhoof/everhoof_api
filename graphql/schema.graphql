# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CalendarEvent {
  summary: String!
  startsAt: Float!
  endsAt: Float!
  preview: String!
  notify: Boolean!
  recording: Boolean!
}

type CurrentPlaying {
  previous: CurrentPlayingTrack!
  current: CurrentPlayingTrack!
  next: CurrentPlayingTrack!
  live: Live!
  timestamp: Float!
  listenersCount: Float!
}

type CurrentPlayingTrack {
  id: String!
  name: String!
  title: String!
  artist: String!
  startsAt: Float!
  endsAt: Float!
  duration: Float!
  art: String!
}

type HistoryItem {
  id: Float!
  playedAt: Float!
  duration: Float!
  playlist: String!
  streamer: String!
  isRequest: Boolean!
  track: Track!
}

type Listeners {
  current: Float!
  unique: Float!
  total: Float!
}

type Live {
  isLive: Boolean!
  streamerName: String!
  broadcastStart: Float!
}

type Mount {
  path: String!
  default: Boolean!
  id: Float!
  name: String!
  url: String!
  bitrate: Float
  format: String
  listeners: Listeners!
}

type Mutation {
  processRecording(fileName: String!, date: String!, preview: String!, eventDescriptionShort: String!, eventDescriptionLong: String!): Boolean!
  voteForNowPlaying(rating: Float!): Boolean!
}

type Playlists {
  m3u: String!
  pls: String!
}

type Query {
  getCurrentPlaying: CurrentPlaying
  getTracksHistory: [HistoryItem!]!
  searchTracks(page: Int = 1, count: Int = 10, q: String = ""): TrackSearchResponse!
  requestTrack(songId: String!): TrackRequestResponse!
  getCalendarEvents: [CalendarEvent!]!
  getStation: Station!
  getRecordings: [RecordingFile!]!
  reloadRecordings: Boolean!
  getPendingRecordings: [RecordEvent!]!
  getBrokenRecordings: [RecordEvent!]!
  getQueue: [RecordEvent!]!
  getHello: String!
}

type RecordEvent {
  fileName: String!
  date: String!
  preview: String
  eventDescriptionShort: String!
  eventDescriptionLong: String
}

type RecordingFile {
  name: String!
  img: String!
  year: String!
  desc: String!
  size: Float!
}

type Station {
  id: Float!
  name: String!
  shortcode: String!
  description: String!
  frontend: String!
  backend: String!
  listenUrl: String!
  public: Boolean!
  playlists: Playlists!
  mounts: [Mount!]!
}

type Track {
  id: String!
  text: String!
  artist: String!
  title: String!
  album: String!
  lyrics: String!
  art: String!
}

type TrackRequestResponse {
  success: Boolean!
  message: String!
}

type TrackSearchItem {
  requestId: String!
  track: Track!
}

type TrackSearchResponse {
  page: Int!
  count: Int!
  total: Int!
  items: [TrackSearchItem!]!
}
